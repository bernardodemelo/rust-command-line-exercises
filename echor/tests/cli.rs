use assert_cmd::Command;
use std::fs;
use predicates::prelude::*; /* 1 */
/*
#[test]
fn dies_no_args() {
    /* 2 */ let mut cmd = Command::cargo_bin("echor").unwrap();
    cmd.assert() /* 3 */
        .failure()
        .stderr(predicate::str::contains("USAGE"));
}*/

/* 1 - Import the predicates crate. This library implements an interface to “predicates” - boolean-valued functions of one argument. The prelude module has all the essentials to work with predicates */

/* 2 - Comment from the author: "I often put the word dies somewhere in the test name to make it clear that the program is expected to fail under the given conditions."

If I run cargo test dies, then Cargo will run all the tests with names containing the string dies.
*/

/* 3 - Run the program with no arguments and assert that it fails and prints a usage statement to STDERR. */

/* #[test]
fn runs(){
    let mut cmd = Command::cargo_bin("echor").unwrap();
    cmd.arg("hello").assert().success(); /* 1 */
}

/* 1 - Run echor with the argument hello and verify it exits successfully. */
*/

/*
#[test]
fn hello1(){
    let outfile = "tests/expected/hello1.txt"; /* 1 */
    let expected = fs::read_to_string(outfile).unwrap(); /* 2 */
    let mut cmd = Command::cargo_bin("echor").unwrap();
    cmd.arg("Hello there").assert().success().stdout(expected);
}

/* 1 - This is the output from echo generated by mk-outs.sh */
/* 2 - fs::read_to_string reads a content from the file.
About fs::read_to_string | You should only use this function with small files. As Ted Nelson says, “The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do.” */
/* 3 - Run echor in the current state */
/* 4 - Run echor with the "Hello there" argument and assert it finishes successfully and that STDOUT is the expected value */
*/

type TestResult = Result<(), Box<dyn std::error::Error>>;
#[test]
fn dies_no_args() -> TestResult {
    let mut cmd = Command::cargo_bin("echor")?;
    cmd.assert().failure().stderr(predicate::str::contains("USAGE"));
    Ok(())
}

#[test]
fn hello1() -> TestResult {
    let expected = fs::read_to_string("tests/expected/hello1.txt")?;
    let mut cmd = Command::cargo_bin("echor")?;
    cmd.arg("Hello there").assert().success().stdout(expected);
    Ok(())
}
